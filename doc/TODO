* fix cached_duration when switching packages

* timeline: redraw marks on update_model if necessary

* implement .apl (advene package list) file format

* webserver: use controller.build_context

* webserver: implement a loop to process dynamic events when
   standalone (in fact, we should use controller and invoke
   controller.update)

* allow to specify the browser for open_url in preferences

* fix bug in snapshot when vout == x11

* check http://chardet.feedparser.org/

* DnD to/from common apps: cf http://www.async.com.br/faq/pygtk/index.py?req=show&file=faq23.018.htp and http://www.async.com.br/faq/pygtk/index.py?req=show&file=faq23.031.htp

* create a meta-package that gives a list of packages to load (Cf .m3u)

* timeline: allow to specify annotation types (2 lists: available,
   present + > < buttons), or reuse gui.edit.elements.EditElementListForm

* timeline: allow to specify  default height

* edit.elements: focus on content window on open

* resource creation: allow to create non-text  resources (specify the
   filename/mimetype)

* Define a ParameteredQuery which takes a single parameter in the path, e.g.:
  here/annotations/containedIn/foobar 
  (use a wrapper similar to the one used for views. Maybe we can
  generalize this principle).

* Implement a charpicker for transcription

* Implement a new action: Enter information -> fill an attribute of an
  annotation (pause the stream, enter the answer)

* Upgrade to simpletal 4.1

* Implement transmission of elements between different applications (esp. transmission of annotations [bounds + content] between 2 timelines) -> new target type + element xml repr.

* allow i18n of template.xml

* save player preferences

* extend unit tests for the model (imports, add, del elements...) in model/test.py

* Pb (QName related) when importing a package importing another one
   (try importing wrong-trousers):
p.imports[0].package.views[1]._getParent().uri, p.imports[1].package.uri
that should return the same URI. The proposed solution is to enforce the importing package to explicitly import the second level imported ones. Pb: namespace clash

* Implement in controller.current_annotation which would allow
   to loop on an annotation through an internal rule : on
   current_annotation end goto currentannotation.fragment.begin

* Store advene conf files in Application Data on win32

* transcribe: make validity check on bounds only on demand or on export.

* transcribe: offset on marks must be followed by goto

* Convert importers to plugin architecture

* MacOS X: write a qtplayer using the Carbon.Qt functionalities (cf
   /sw/lib/python2.3/plat-mac/videoreader.py)

* Audio commentaries : add a "Record" button. While pressed, it
   records. Upon release, it creates an annotation with the correct
   bounds. Cf
   http://www.speech.kth.se/snack/man/snack2.2/python-man.html
   and
   http://tedlab.mit.edu:16080/~dr/SplitIt/
   http://trans.sourceforge.net/en/download.php

* Model: implement annotation types and relations types removal

* treeview: model synchronisation pb when deleting queries

* schema editor: cf tools http://www.rexx.com/~dkuhlman/

* Write a advene-openoffice binding to automate video/presentation sync.

* New action: translate ?

* Create python binding to avidemux (for frame-by-frame functionality)

* Rewrite admin templates with AJAX functionalities (cf http://ajaxpatterns.org/Main_Page)

* Linux-installer (one file executable): http://pyinstaller.hpcf.upr.edu/cgi-bin/trac.cgi

* Bug in webserver.py for files with accents in their fullpath (encoding pb). Should check all encodings everywhere and make sure everything is utf8 internally.

* Demo movie maker : http://en.wikipedia.org/wiki/Screencast
http://www.debugmode.com/wink/
vlc --screen-fps=2 screen:// --no-sout-audio --sout '#transcode{vcodec=mp4v,venc=ffmpeg,scale=0.2}:standard{access=file,mux=avi,url=/tmp/foo.avi}'
istanbul

* Read http://www.ling.uni-potsdam.de/~stede/Downloads/xbrac04.pdf
(survey of annotation tools)

* Store the navigation history as a package with viewed sequences and
occurring events (but base timeline is then application time instead
of movie time)

* timeline: find a way to render overlapping buttons

* SMIL examples: http://webmonkey.wired.com/webmonkey/00/41/index4a_page3.html?tw=authoring

* exports.xml: define a CMML export view (cf www.annodex.net)

* TTS on Win32: http://www.cs.unc.edu/~parente/tech/tr02.shtml

* Timeline: select a region to fit to window

* Transcribe: add an option "Cursor follows time" to set the cursor
   according to movie time 

* On-the-fly annotation: display as caption the edited content (for 1s)

* Sound recording in python: http://www.johnnypops.demon.co.uk/python/ See also http://divmod.org/projects/shtoom/

* Sound assistant: use cont_fileseg from sphinx2-bin to segment audio, or http://www.cmis.csiro.au/maaate/ or http://aubio.piem.org/news/

* assistant: speech decomposition (only extracts timestamps). Use speech-tools ? http://www.cstr.ed.ac.uk/projects/speech_tools/manual-1.2.0/x737.htm

* Main GUI: tooltips on STBVs (must use an EventBox)

* STBV: add include facility, to include basic STBVs

* webserver: implement a wiki-like syntax in views that dynamically generates links to Advene elements/TALES expressions (define a application/x-advene-wiki that will get converted into a TAL template)

* handle wiki syntax in transcriptionedit, so that we can do simple notetaking with some markup easily.

* Implement zeroconf support: http://www.amk.ca/python/zeroconf

* Views: design a parent class with facilities to register views,
   precise their parameters (usable from actions and webserver
   invocation).

* make navigation history accessible from TALES (/options/history ?)

* keep a viewed_segments structure to propose a view "Not yet viewed sequences"

* Remove show_all() calls in EditElement popups

* InteractiveQuery: propose other output modes

* timeadjustment: make Play create an internal rule that pauses the player at the end of the fragment

* Advene tutorial in advene, with a video capture of an interaction session

* vlc: use picture+mosaic to implement video embedded inside video (to
  quickly preview a fragment)

* transcription : catch the AnnotationEditEnd event and update the
  display

* Expand the notify action to add a "comment" parameter to specify the
context of the action, in order to build an interaction history and
maybe replay the hypervideo. Need to determine the context structure.

* New action: display a fragment of a video then continue from the
position where the link was activated. Parameters: fragment to play,
return position, or display in a new video window

* Model: maintain creation date + modification date for elements

* EditElement: offer a combobox for the mimetype field, populated with
common mime-types -> wait for gtk2.6 with CellRendererCombo

* MediaControl.idl :
  * sound_[sg]et_volume: normalize volume in [0..100]
  * implement set_visual in API
  * implement get_aspect_ratio (or get_dimensions ?)
  * implement get_api_version()
  * implement get/set_rate

* All GUI views: convert action buttons to toolbars

* transcription: handle annotation content modification (on window close)

* navigation history: put 2 snapshots (origin, destination) to contextualize

* transcribe: add a small timeline on the top that displays the
position of current marks in the video (with small lines) [cf linkmap
   in /usr/lib/meld/filediff.py ]

* Popups: white on black background

* Implement a generic VisualisationWidget that can be either embedded
in the main Advene, either in its own window (video + views) -> cf gui.visualisationwidget

* controller.update: implement a future_approaching and a
future_leaving to implement a -2 seconds before / +2 seconds after
annotation event.

* Importer: fix automatic filter selection (get_importer) esp. for XML
   files (use DTD)

* Importer GUI : button "Select a specific importer"

* Add a "release" script that updates the version number in:
  debian/changelog
  lib/advene/core/version.py (+ date)
  advene.iss
 + wget Twiki:AdveneUserGuide to doc/user.html (cf scripts/update_doc)

* Add parameters to TimeLine view (displayed annotation types, zoom)

* Morphix image : use Ubuntu as a base (pygtk included). Missing: vlc + python-vlc

* Rewrite webserver using Twisted (and maybe use it also for ECAEngine) ?

* Correct bug when no type is present (cf export_views.xml)

* timeline: directly create annotations from timeline

* Annotation resize in timeline -> Hack (right button). Should
reimplement a native widget for annotations or use DiaCanvas

* Génération régulière d'annotations (toutes les XX secondes), pour
alignement plus facile par la suite (couplé avec les fonctions
d'alignement dans la timeline).

* browser: select base element (annotation, package, ...)

* GUI: use icons and graphic files from openclipart, to alleviate any
copyright problems

* Mandrake: need
pygtk2
pyxml
python-imaging (warning: version 1.1.4-6 (from Mandrake 10.1) is broken, use version 1.1.4-3 (from Mandrake 10.0) instead)
simpletal (install from source)
vlc

* Morphix image:
Need to add :
python-gtk2 (>=2.0)
python-glade2 (>=2.0)
vlc (>= 0.7.2) and depedencies
python-vlc, vlc-plugin-svg
python-xml (>=0.8.0)
python-simpletal (>=3.9)
python-imaging

* Implement a action-history widget, that displays all events taking
place with the previous and next states, so that we can know what took place

* Video player: investigate pyxine and gst-python :
http://gstreamer.freedesktop.org/releases/gst-python/0.8.2.html
https://gna.org/projects/seamless/ (DVD player using gst-python)
Also win32com (http://www.boddie.org.uk/python/COM.html)

* Remove vlc references in advene.core.config

* Item File->statistics : nombre d'elements (ann, rel, etc)

* subtitles.xml -> clean up

* Implement "copy/paste" on elements

* A creuser: http://veejay.sourceforge.net/

* Fonctionnalité de sauvegarde automatique reguliere en cas de plantage

* Use transcode to extract screenshots (cf dvd:rip). Command line:
transcode -H 10 -z -k -o snapshot -y jpg,null -i /dev/dvd -x dvd,null -T 21,1 -c 00:00:10.0-00:00:10.5

* Save ad-hoc view parameters as another view

* In Context (or the GUI), catch AdveneTalesException that happens
when there is a syntax error in a TALES expression (missing string orbadly written symbol) and display a meaningful message

* Rename advene.util.vlclib to something more meaningful (advene.util.helper)

* Transcription: complete annotation edition

* Annotation chanson: paroles / refrain /couplet + UTBV/STBV (transcription)

* Create a 'shapes' package which will define various SVG shapes
  (moon, sun, triangle, etc) as views

* Complete the bootstrap package

* Edit element popup: check that the data was not modified before closing

* Should snapshots be done with annotations drawn or without ??

* More fine-grained snapshot specification. Idea: specify a percentage
  of the annotation time. Can be implemented with an internal
  "snapshot-schema" defining "snapshot" annotation types, that would
  be linked through a "snapshot-relation" relation with the
  corresponding annotations.

* RelationType: impossible to delete from popup

* Make the absolute time specification work for display_text (rather
  than relative positions)

* UTBV: implement Undo in textview (cf gtksourceview)

* Model related:

** Model: Implement copy/rename of id for all elements

** Allow to specify preferred package (bootstrap) for default views

** schema.author error ?? Cf importer.py (ElanImporter)

** Bug in util.uri.urljoin if pkg_uri == 'dummy:1' (get does not work
in bundles). To exhibit: in ElanImporter, change the uri of the new
package to 'dummy:1'

** The model should check the data validity (no duplicated id, valid id syntax, etc)

** Model: proper handling of exceptions (for instance, a view is
imported and its id changes in the imported package -> KeyError
exception)

** Model: annotations should be sorted according to fragment.begin

** Before that, implement a hook for LoadPackage and AnnotationEditEnd
which sorts the annotations upon package load.

** Clean the mediafile handling. It should be stored in fragments, or
at least all fragments should be scanned upon package loading to
determine the available stream(s) and propose them to the user.

** Make some attributes inherited (esp. author for annotations, media for fragments)

** The view method should return a Content object, so that we can get
 its mimetype. *or* return a specialized class derived from (str,
 object) that adds a mimetype property

** Create a ContextualizedBundle which understands namespaces

** Make the package a .zip file, with a MANIFEST, data.xml and
resources/ directory

** Fix package generation: upon loading, we discard the initial
processing instruction (<?xml version="1.0" encoding="UTF-8"?>) from
the DOM and do not restore it before saving, so it gets lost.

** Find a way to override standard advene elements with new methods
(for instance, snapshot_url and media_control for annotations) in
order to avoid using too many global methods.

** Import elements GUI: implement "Add/Remove package" -> ready, but need the corresponding method in the model to remove

** Model: Pb in imported packages:
  [ s.title for s in p.imports[1].package.schemas ] works but
  [ s.id for s in p.imports[1].package.schemas ] does not:

 File "advene/model/modeled.py", line 185, in getId
  File "/usr/local/src/advene-project/lib/advene/model/package.py", line 258, in getQnamePrefix
    raise AdveneException ("item %s has no QName prefix in %s" %
AdveneException: item Package (english_teacher.xml) has no QName prefix in Package (../examples/unicode.xml

** Model: Implement importElement methods (or at least, document the existing ones and add an importPackage() to be able to specify the package's alias)

** Model: implement relationtype.members R/W (and make that a list of
AnnotationTypes rather than their ids) -> DONE for R/W.

** model: rewrite the model with a new format (.zip) using
http://effbot.org/zone/celementtree.htm ? -> DONE (.azp)

** model: implement a data PATH variable to look for packages. Insert
the current package's pwd first as default.

* EditAnnotationPopup: implement Next and Previous

* Implement in the standard lib the notion of previous/next
annotation, of the same type or not.

* Register all editing popup windows to close them upon package reload

* Treeview: add the elements attributes as annotation/relation children.

* MediaControl.idl: get_capabilities() returning a list of
  capabilities ("snapshot", "caption", "svg")

* Interface with http://www.archive.org/movies/ (XML files)

* VLC: zoom functionality (crop?)

* Anvil converter

* Bug: STBV menu not correctly updated

* vlc-plugin-corba: rename MediaControl.so to MediaControl_module.so
and install it into /usr/lib/orbit-2.0

* Implement action "Delay"

* Watch Europython:
http://www.europython.org/conferences/epc2004/info/talks/refereed/kaladan01

* Query MPEG7: http://www.idealliance.org/papers/extreme03/html/2001/Liu01/EML2001Liu01.html

* Try to remove the dependency on PIL by using pixbuf loader to convert snapshots to PNG.

* Create a Sequential editor (to accomodate existing work)

* In ECA elements, TALES expression could be prefixed by string: by
default, using the ${} syntax to evaluate expressions ???

* Content: how to represent structured data ? Cf MPEG7 DS ? (hackingly
  half DONE, grep source for application/x-advene-structured). Or
http://www.rexx.com/~dkuhlman/generateDS.html (XML-Schema) Or SOAPy

* Assistants:
  - shot detection
  - voice recognition
  - relation creation (based on criteria like "shot in sequence" -> isPartOf)

* Timeline:
  - copy/paste paradigm
  - concurrent annotation representation
  - annotation alignment (=~ arrange/align in Impress)
  - ability to specify line order and which types to display

* Make the annotation interface as On-Screen Display over the video window

* vlc-dev: use the new start-time and stop-time functionality in core VLC to correctly
  handle positions in start and stop.

* Update EPOZ code to 1.0.2 / kupu
http://article.gmane.org/gmane.comp.web.kupu.devel/10
Transmit python data to javascript:
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/285099
Cf basic tutorial
http://www.onlamp.com/pub/a/onlamp/2005/04/28/kupu.html

* Windows/gtk has a problem with threads. Solve using the recipe given in:
  http://www.daa.com.au/pipermail/pygtk/2004-February/006900.htm
  http://www.daa.com.au/pipermail/pygtk/2004-February/006960.html

* Fix for SVG module :
 - find a way to trigger the svg module rather than the freetype module

* Create a simple SVG editor (rectangle and ellipse) and integrate it in Advene

* Display the data in the form of a graph (annotation=Nodes, relations=Arcs or nodes)

* Style setting:
sendmail_styles="""
style "green_button"
{
  fg[PRELIGHT] = { 1.0, 1.0, 1.0 }
  bg[PRELIGHT] = { 0, 0.75, 0 }
}
widget "sendmail.*.Send*" style "green_button"

style "blue_text"
{
  text[NORMAL] = { 0, 0, 0.75 }
}
widget "sendmail.*.mail" style "blue_text"
"""
gtk.rc_parse_string(sendmail_styles)

* Find a meaningful way to concisely display relations and annotations.

* Reorganize webserver code

* EPOZ: implement data templates according to the edited element,
  by hacking around LinkTool
  For packages
   annotations (List of annotations)
   relations   (List of all relations)
   annotations/i... (Precise annotation)
   annotations/i.../snapshot_url (Annotation for snapshot)
   annotations/i.../content/data (Content of annotation)
   annotations/i.../fragment/formatted/begin (Start time of the annotation)

* EPOZ: strip http:... prefix from drag and drop results.
* Create TALContext object: -> DONE
     Constructor(selNode) : takes a node 
     get_define(name): get the define for the given name
     set_define(name, value): set the define
     list_define(): get the list of defined names
     get_repeat(name): get the repeat for the given name
     list_repeat(): get the list of repeat loop items
     get_content(): get the content
     set_content(string): set the content

* EPOZ: derive LinkTool into TALContentTool and TALImageTool, to be
able to define content/replace (just replace with <span/> will be
simpler) and snapshot integration.

* bootstrap.xml : how to use properly ? Can a package exist with no view ?

* Once bootstrap.xml works correctly, put it somewhere pertinent and
use it as the template.xml file

* Ruleset edit : add the possibility to order the rules

* Global methods :
  * isa : make more robust (work on non-advene elements ? at least, not throw
    an exception and return 'unknown')
  * formatted : make more robust
  * first, last, rest, meta, snapshot_url, view : idem
  * authorUrl on package ???

* Use popup-menu signal (cf http://cvs.gnome.org/bonsai/cvsblame.cgi?file=gtk%2B%2Fdocs%2Freference%2Fgtk/migrating-checklist.sgml&rev=HEAD&root=/cvs/gnome)

* Windows: start application
http://groups.google.com/groups?selm=100p81q3kshsuca%40corp.supernews.com

------------------------------------ Archive ------------------------------------------
* Write the correct VLC/Python module -> DONE

* Use gettext to internationalize the application (cf http://listas.aditel.org/archivos/python-es/2003-February/003642.html for glade) -> DONE

* The advene python modules should be in /usr/lib/advene (with subdirectories advenetool, advene, util), cf below -> DONE in Debian package

* Build a debian package. Cf
http://www-106.ibm.com/developerworks/linux/library/l-debpkg.html -> DONE (badly)

* Needed method: package.findMatchingRelation(source_ann, dest_ann) -> DONE

*** Create a RelationBox view plugin -> DONE

* Restructure code (and take the opportunity to move to another
  versioning system [arch or svn for instance]) :
Cf http://sial.org/howto/subversion/cvs-migrate/ for migration hints.
http://www.onlamp.com/pub/a/onlamp/2002/10/31/subversion.html

  advenelib/advene -> advene/model/...
                  /util -> advene/model/util/

  advenetool -> 
                advene/core
                           config.py
                           controller.py (GUI independant parts of advenetool)
                           webserver.py (ex. adveneserver.py)
                           mediacontrol.py
                           imagecache.py
			   util.py (utilities with very small dependencies)
                advene/gui
                          main.py (ex. advenetool, w/o controller)
                          views/
                                timeline.py
                                tree.py (ex. packagemodel.py)
                                logwindow.py
                          edit/
                               generic.py (generic edit classes)
                               elements.py (edit Advene elements [generic], ex. gui.py)
                               annotation.py (edit annotation (specific), ex. edit.py)
                               rules.py (edit Advene rules, ex. eventgui.py)
                               timeadjustment.py
                               config.py (edit Advene configuration)
			       tales.py (edit TALES expressions)
                          util.py (image/png2pixbuf)
                advene/rules
                             ecaengine.py (main engine)
                             elements.py (ex. events.py)
                             actions.py (default actions)
                advene/util
                           vlclib.py (???)
                           client.py
                           spawn.py
                advene/share/
                             pixmaps/...
                             advene.glade[p]
                             template.xml
                             default_rules.txt
			     format/advene.rng
                advene/doc/
                           html/... (epydoc generated)
                           README
                           TODO
		advene/po/...
                advene/scripts/...
                advene/debian/
                              control

* Add sound_set_volume and sound_get_volume to MediaControl.idl -> DONE

* Rules: add a "internal" flag to indicate whether to save/edit or not
  the rule (internal=True by default) -> DONE (rule.origin)
  But we do not use it : instead, the ecaengine uses multiple rulesets
  ('default', 'internal' and 'user' by default)

* Implement attributes first and last in bundles (easy) -> DONE (in global_methods)

* Put relations in a <relations></relations> container, so that we
  have a consistent package/relations/ access (else, relation/absolute_url
  returns annotations/id, which is misleading) -> half DONE (absolute_url fixed)

* Add a /config directory, holding config values for the user (esp.
  edit window width and height) and implement PUT method on it
  through a /options/config dict in TALES -> DONE

* Correct all edit plugins (to correctly update values) -> DONE
  * Add self.model everywhere
  * Add self.editlist everywhere, to register edit plugins inside
    the self edit plugin.  update_value will be called upon these.

* Adveneserver: implement PUT (to please epoz) -> DONE

* Incorporate EPOZ :
  * add a config.data['web'] = dir variable -> DONE
  * Handle the /data URL (picks data in config['web']) -> DONE
  * Add epoz in config['web'] -> DONE
  * Add epoz for add-view

* EPOZ: implement parent search for defines/repeat -> DONE (TALContext)

* Ruleset editing (eventgui.py) : give the possibility to edit only a
subset (according to rule.origin) -> DONE (filter parameter)
  Re-DONE : cf note on ecaengine before

* Implement an 'advene browser' à la NextStep file manager -> DONE
 
* browser: focus on the currently selected column -> DONE

* Rules: define independant rulesets in packages -> DONE

* Rule: add an "ViewActivation" event, to define actions to be taken on STBV activation -> DONE

* Metadata : cache the stream duration (for GUI purposes) -> DONE

* Debian package: add python-xml python-simpletal dependencies -> DONE

* Implement an ApproximateImageCache with a ic.epsilon value -> DONE

* The content object should provide a "dom tree" access method -> DONE (content.getModel) 
  but not cleanly

* Adveneserver: use logging.Logger to log HTTP accesses -> DONE

* Add /usr/share/doc/... for all debian packages (and
  examples/client.py for vlc-plugin-corba) -> DONE

* debian package: fix web/web not in the right directory, default_rules.xml -> DONE

* Remove gtk dependency from vlclib (so that we can start adveneserver
without DISPLAY) -> DONE

* Create a GUI to be able to select and preview the right
  chapter/title for a DVD (in order to correctly initialize the
  package.media property) -> DONE

* Make a UTBV view using CSS displaying annotations and screenshots on a timeline -> DONE

* Idea: make a snapshot everytime a new position is given, so that we
can build a history of navigation -> DONE

* Fix the simpletal problem: all string values should be unicode ->
seems to work OK. To check... -> DONE

* Advenelib: implement AnnotationType and RelationType creation methods. -> DONE

* ! Handle unicode correctly and everywhere (GUI, adveneserver, XML,
  ...) -> DONE

* Tree view : implement "Add/Remove" option in popup menus (Add new view, Add new type, ...) -> DONE

* Propagate AnnotationEditEnd and RelationEditEnd events in active views -> DONE

* Add a "Edit" button next to the STBV optionmenu -> DONE

* Fix the UpdateElement problem in tree view when creating a new
element (maybe we should have AnnotationCreate and AnnotationEdit
events) -> DONE

* gui.main should catch the information about a new view being defined and update the
  interface accordingly (for instance, a new annotation type or a new
  dynamic view created) -> DONE 

* More quickly : STBV Optionmenu should only have a reference to the STBV id, so that
  the new version is taken into account when edited. -> useless

* Implement a representation meta-attribute that gives a TALES
  expression whose evaluation will return the representation string of
  the element (useful for parsed elements for instance) -> DONE (meta 'display')

* Query language: either python-based (very generic) or reusing the
  rules framework (conditions) -> DONE

* Implement query in global_methods -> DONE

* Clean-up the player interface (which is now spread across
  advene.util.vlclib.VLCPlayer and advene.core.mediacontrol.MediaControl) -> half DONE
  (everything is in mediacontrol now, but we should unify this and provide a clean API
   to ease portability across different players). Idea: provide a
   PlayerFactory which returns a Player instance (more flexible).

* Add a notebook view in the place of the defunct HTML widget -> treeview

* Conditions: implement regexp match -> DONE

* webserver: /media/play?position=... : return the referer page -> DONE

* Envoyer package et infos à Denis pour portage windows -> DONE

* Write document on TALES syntax and root elements -> DONE (doc/user.txt)

* actions: convert messages from unicode to str. DONE: report CORBA bug

* Offer a python command-line to access/modify the package -> DONE (C-e)

* Move gui.edit.annotation into gui.edit.element.EditAnnotationPopup -> DONE

* New actions: GotoPopup (display a message and propose to go to another position) and InfoPopup (display information) -> DONE
              
* In AnnotationTypes edit popup, give access to the "display" meta attribute -> DONE

* When choosing a video file or DVD, update the package mediafile property -> DONE

* New action: DisplayMarker (shape, color, position, duration) -> DONE

* PopupMenu: add access to browser on current element -> DONE

* Control-Return: validate annotation and begin editing a new one -> DONE

* Italic/Bold face for annotations with relations -> DONE

* Help: display user.txt -> DONE (user.html)

* setup.py: build share/web/user.html from doc/user.txt -> DONE

* webserver: implement /media/stbv -> DONE

* Fix bug in queries: the context is not inherited by the query method, so
  here gets reset to another value -> DONE

* Fix slider update (movie duration)  -> DONE

* Popup menu for annotations: add a subtree to access relations and
  related annotations -> DONE

* Timeadjustment: 
  Button "Play from here" to visualize current time
  Button "Use current time" on begin/end to set to the current time
  Button "Update snapshot" -> DONE

* Architecture generique d'import d'annotations externes (annotations, schemas) -> DONE

* Find a way to specify the version number in the sources and use it in setup.py  -> DONE

* Check id validity (no spaces) when creating elements (views) -> DONE

* ELAN converter (http://www.mpi.nl/tools/elan.html) -> DONE

* Add numbers in valid identifiers -> DONE

* Conditions: implement Allen's relations -> DONE

* Segmentation fault upon quitting with window manager button -> DONE

* Specify mimetype in view editing window -> DONE

* In create popup, link "Return" to validation -> DONE

* Return a "204 No content" in webserver upon /media/play... actions
  instead of a redirect -> DONE

* gui.popup should have a reference to the main gui, so that it can call
  register_view and close_view_cb -> DONE (in controller)

* Make import work -> DONE

** The package/annotationTypes should have an 'ids' method, to be able
to retrieve ids as keys (all bundles in fact) -> HACKED in bundles

* Action: ActivateSTBV -> DONE

* Views should memorize their position/size (idea: have a
gui.size_cache dict, indexed with window names ("edit", "timeline",
"tree", ...) and containing sizes). It should be saved upon quitting
-> create a .advene_prefs file with a pickle of a prefs dictionary -> DONE

* timeline: implement a popup method that creates the toplevel window -> DONE

* Action: DisplayPopup2, DisplayPopup3, DisplayPopup4 with additional
parameters (general message + message1,position1 + message2,position2,
...) -> DONE

* Define a gui.SingletonPopup with timeout  -> DONE

* Define a generic popup method in view-plugin -> DONE

* GUI for advene.util.importer -> DONE

* Interface to edit imports -> DONE

* RelationTypeEditPopup: allow to specify the annotation types -> DONE
(but support missing in model)

* gui.edit.element: Implement EditElementListForm, based on ListStore?
or ButtonBox?, to allow the edition of members of relations and
members of relationtypes. Parameters: field, membertypes or memberids -> DONE

* Element editing: add description field and edit content-type attribute -> DONE

* Generic for views: add a .popup() method opening a window -> DONE

* STBV: implement at least one level undo on action parameters -> DONE (action parameters are cached when changing action name)

* Create 2 Popup widgets: a singleton one (that is always visible and
  is reused across different invocations) and an accumulator one (with
  a size limit and a timeout) -> DONE

* Window to confirm quitting: use "Save package? Yes No Cancel" -> DONE

* View: display transcription with highlighting of active fragments -> DONE

* Make the annotation edit entry a multiline entry. -> DONE

* ECA: implement a position heap memorizing jump positions (in order
to implement a "Return to last position") -> DONE (navigation history)

* Transcription: access to options: display timestamps, select
separator, display marks, apply expression (for structured content) -> DONE

* Implement an image-based timestamp chooser (with all_snapshots()) -> DONE

* create.py: when creating a new dynamic view, create also the first rule -> DONE

* Transcription view: add a "Save as" button -> DONE

* bootstrap: Implement queries next and next_global that return the next
annotation of the same type, or global -> DONE

* Organize action names and conditions along categories -> DONE

* export.xml -> export_views.xml -> DONE

* edit DC description for packages -> DONE

* bootstrap: supprimer stbv pause after annotation -> DONE

* views should return a TypedString(unicode) with a contenttype or mimetype attribute -> DONE

* Test if relations exist when deleting annotations

* Make the main buttonbox of the main window a toolbar -> DONE

* Logwindow: add a close button  -> DONE

* Logwindow: catch the destroy event and hide the window -> DONE

* Add a file operations toolbar (new/open/save, import, etc) -> DONE

* tree.py: fix on_get_iter (cf tutorial) -> DONE

* Fix fileselector bug -> DONE (use FileChooser)

* Preview in fileselector to open package: display description and number of elements -> DONE

* display DC description for packages on import -> DONE

* Upgrade to gtk2.4 (fix DeprecationWarnings) -> DONE

* Upgrade simpletal support to 3.9 -> DONE

* player: implement vlchttp -> DONE (too slow)

* Improve path settings on Windows -> Done

* Player API: get DVD device from libvlc.configGetPsz("dvd") -> DONE

* player: implement dvd_uri(chapter, title, uri?) that returns a
valid DVD uri for the given player -> DONE

* Add new action: open new ad-hoc view -> DONE

* Importer: mark the imported package as non_saved

* EditTranscription: view for editing a transcription and putting timestamps (live) in it, in order to generate annotations. -> DONE

* timeline (362): remove deprecated OptionMenu -> DONE

* main: implement a get_control_toolbar() method -> DONE

* Dig into freevo to find out how they control mplayer with python -> DONE (cf player/mplayer.py)

* DND on annotations in timeline : offer menu: Align annotations/Create relation. If same type, only offer "Extend to reach this annotation" ? -> DONE

Other possibility: add a buttonbox on the side with functionalities (create links, align begin, align end, etc)

* gui.edit.elements: add "modal" parameter to edit() -> DONE

* implement default_stbv that gets activated on package load. -> DONE

* TranscriptionEdit: add a player control toolbar (in fact, the player
control toolbar should be available in all views) -> DONE

* Element id generation: use an incremented index and check that it is
not already used (will create more friendly ids). Will be best
implemented by a singleton IdGenerator that caches the last index for
each type. -> cf advene.core.idgenerator

* Implement copy/paste for rules/rulesets -> implemented DnD

* Add access to media duration from TALES -> player/cached_duration

* To embed windows in gtk, use widget.window.xid (in X11) and
  widget.window.handle (in Win32) -> DONE

* Create a CellRenderer for time values (with time adjustment integrated) -> DONE

* Create a unique logger in controller and use exclusively this one in all modules -> DONE

* Timeline: clone an annotation to another type by DND on the type -> DONE

* Activation of rules: not immediate -> DONE

* transcribe: ability to mark some text as "ignored" -> DONE

* fix bug (segmentation fault) when an annotation.begin == 0 (cf event handler) -> DONE

* Edit metadata: fix empty metadata pb (UTF8 newline) -> hacked
  related to: GUI: do not put newline in representation field when
  editing annotation types, model related problem (XML Pretty Printer messes output)

* Create a TALES evaluator/editor widget (from browser?) -> DONE

* TALES : offer a validity checking -> DONE

* TranscriptionEdit: when saving and loading, handle [[xx:xx:xx]]
timestamps marks -> DONE 

* Timeline: add the possibility to add new annotations by clicking on the type -> DONE

* Check the encoding of get_default_media (seems to be incorrect wrt utf8)

* transcribe: 
   * Add Save/Save as functionality + Control-S shortcut
   * Handle ignored annotations in load/save

* popups : fixed sized for popups. -> DONE

* popups : add context (timecode + snapshot) + title frame -> DONE

* Importer: add "Converted from ..." in generated package description -> DONE

* notify: handle 'immediate' param -> DONE

* Fix STBV activation from webserver (implement an action queue in
controller and register actions in it, which are run in idle gtk loop) -> DONE

* GUI: implement Recent Files functionality (using the freedesktop.org convention?) -> DONE

* Merge gui.edit.timechooser and gui.views.history -> removed timechooser

* Implement completion in TALES fields -> cf tales.TALESEntry

* webserver: should move query parameters to "request" root element instead of "options" -> DONE

* http://weblex.ens-lsh.fr/projects/xitools/format_xi/ -> DONE

* Make the request object accessible in AdveneContext -> DONE

* website: developpers wanted: -> DONE
  VLC:
    - frame-precise positionning
    - handle position parameters for start/stop/pause/snapshot
    - fix snapshot (timestamps)
  Player: implement support for other players
  Web:
    - develop new admin views
    - integrate kupu

* webserver: implement /application/stbv/Nom (instead of /media/stbv)
                       /application/adhoc/(tree|timeline|transcription) -> DONE

* transcribe: handle 0 mark -> DONE

* InteractiveQuery, display results in a timeline (use _interactive query id) -> DONE

* transcribe: make timing offset a editable field -> popup menu only
displays "-offset / +offset" -> DONE

* export-views: excel-export view (CSV) -> DONE

* Main GUI: crash when creating annotations on the fly ?? -> DONE

* pyvlc: find the bug triggered when no option is given to MediaControl (stack corruption?) -> DONE

* Windows: package libsnapshot_plugin.dll (with MediaControl ?) -> DONE

* To build vlcmodule:  cf Makefile
gcc -pthread -shared build/temp.linux-i686-2.3/vlcmodule.o build/temp.linux-i686-2.3/mediacontrol-init.o build/temp.linux-i686-2.3/mediacontrol-core.o /usr/lib/libtheora.a /usr/local/lib/libx264.a -L/usr/lib/vlc -L/usr/lib -lvlc -lrt -ldl -lpthread -lm -li420_rgb_mmx -li420_yuy2_mmx -li420_ymga_mmx -li422_yuy2_mmx -lfaad -lavcodec -lavformat -lhal -ldbus-1 -ltheora -lx264 -lfaad -lmux_ts -ldvbpsi -lpostproc -lmemcpymmx -lmemcpymmxext -lmemcpy3dn /usr/local/lib/libfaad.a /usr/lib/libtheora.a /usr/local/lib/libx264.a -lavcodec -o build/lib.linux-i686-2.3/vlc.so -fpic -fPIC

* transcribe: note taking facility (enter text, when clicking on
ctrl-enter insert a timestamp mark) -> DONE

* Fix moviepath (_ does not seem to work) -> DONE

* timeline: add init parameter "whole package" (or None: if self.list is None, use self.controller.package.annotations) -> DONE

* EditContent: add button "External editor" -> Implemented Open/Save/Reload

* Implement "Search" on annotations. Could be done as a pre-filled
filter that is displayed in a treeview -> should modify TreeWidget to
accomodate a FilteredDataModel

* web site: list current features (import, etc) -> DONE

* corba: Add the 'repeat' property on all items in the playlist -> cf repeat config in vlcrc -> DONE

* Bug in queries (rest not empty even if applied to 1-element lists) -> DONE

* STBV action: display an activable link -> DONE

* The transcribe view would be better in the place of the popups widget -> DONE

* Transcribe: add Ctrl-PageUp/Down to jump from 1 timestamp to the other. -> DONE

* Rename "Import a transcription" into "Take notes on the fly" -> DONE

* Package properties: add file browser for associated media

* Project hosting: http://www.gna.org/ -> DONE

* Menu: add a File/Associate video file item

* Put an example package on the web site and a video of an example interaction

* transcribe: add screenshots to marks context menu

* GUI: use STOCK_MEDIA_* icons introduced in gtk 2.6 -> DONE

* Move GUI-actions from main to gui.actions -> DONE (in gui.plugins)

* Check windows registry paths for 'vlc', 'plugins', 'locale' that are bad in Italian (Programmi)

* plugins Implementation : cf
   http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/436873 for
   a start -> DONE (cf advene.core.plugin)

* Data toolbar: with creation buttons (schema, annotation/relation
   type, view, query) -> DONE

* webserver: log access/error log to either a file or a window -> DONE

* webserver: handle full html documents (with headings) either by
using a specific mimetype (text/x-full-html) or if
res.startswith('<html>') [useful for Kupu]

* On player restart, redo set_visual

* plugin infrastructure is not compatible with pyinstaller. -> DONE

* AZP: make work on win32 (urllib.pathname2url) -> DONE

* ecaengine: sort actions to execute according to a priority parameter
   (which would be 200 for internal rules, 100 for default rules, and
   between 0 and 100 for user rules) -> DONE

* evaluator: implement expression history save -> DONE

* webserver: offer a /action/??? method to allow interaction through
  the standard actions framework

* In on_exit, first stop the event handler -> DONE

* put timeline/css from unicode in export_views

* Prevent the reuse of the same id

* allow to edit config.data.paths[] (maybe put them in
   data.preferences ?)

* add default extension to filenames when saving

* In content editor (for TAL views), add a button to invoke the
  package browser to insert paths or values.

* viewbook: on add_view, make the new view as default visible

* implement support for global_methods definiion in user plugins

* view.transcription: replace bottom buttons by preferences panel

* replace the popup widget by a notebook, with timeline +
   popupaccumulator + transcribe window + gtkmozembed

* create a gtkmozembed view -> DONE

* On timeline.update_model, check package media file duration. If
   changed, update scale -> DONE

* option parsing: move to core.config, allow standard options (--help,
   --version, --config)

* tooltips are not displayed in action parameters

* use 2 viewbooks on the RHS of the video

* webserver: in /actions, add links and automatically generate forms
   with action parameters

* Search everywhere for imagecache, idgenerator, modified -> package attributes

* Make the Advene GUI able to grok multiple packages. Focus (for
   events) is defined for 1 specific package.

* implement close package

* fix multiple file loading on command line

* implement check of packages._modified in on_exit

