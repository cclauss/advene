#! /usr/bin/env python

import sys
import time

import ORBit, CORBA
try:
    sys.path.insert(0, '.')
    import config
except ImportError:
    sys.path.insert(0, '..')
    import config
import mediacontrol
import atexit

ORBit.load_typelib (config.data.typelib)
import VLC

def create_position (value=0, key=None,
		     origin=None):
    """
    Returns a VLC.Position object initialized to the right value. By
    default using a MediaTime in AbsolutePosition.
    """
    if origin is None:
        origin=VLC.AbsolutePosition
    if key is None:
        key=VLC.MediaTime
    p = VLC.Position ()
    p.origin = origin
    p.key = key
    p.value = value
    return p

def format_time (val=0):
    t = long(val)
    # Format: HH:MM:SS.mmm
    return "%s.%03d" % (time.strftime("%H:%M:%S", time.gmtime(t / 1000)),
                        t % 1000)

def get_info (mediafile):
    pos = create_position()
    player = mediacontrol.Player()
    player.playlist_add_item (mediafile)
    player.start(pos)
    tries=5
    s = player.get_stream_information()
    while s.mux_rate == 0 and tries > 0:
        tries -= 1
        time.sleep(1)
        s = player.get_stream_information()
    player.exit()

    if s.mux_rate == 0:
        return None
    else:
        return s

if __name__ == "__main__":
    try:
        mediafile = sys.argv[1]
    except IndexError:
        print "Usage: %s mediafile" % sys.argv[0]
        sys.exit(1)

    s = get_info(mediafile)
    if s is None:
        print "Unable to get media information."
        sys.exit(1)

    duration = s.size * 1000 / s.mux_rate

    # FIXME: we could report specific values depending on options
    print """Media information:
    Filename         : %s
    Size (in bytes)  : %d
    Duration (in ms) : %d (%s)
    Mux-rate (in bytes/s) : %d
    """ % (s.url, s.size, duration, format_time(duration), s.mux_rate)
