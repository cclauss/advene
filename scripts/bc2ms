#! /usr/bin/env python


import sys
import time
import xml.dom.ext

try:
    sys.path.insert(0, '.')
    import config
except ImportError:
    sys.path.insert(0, '..')
    import config
    
import advene.constants
from advene.package import Package
from advene.annotation import Annotation
from advene.fragment import MillisecondFragment
from advene.fragment import ByteCountFragment
import advene.viewable as viewable
from cStringIO import StringIO

from advene.tal.context import AdveneContext

class Convert:
    def __init__(self, source=None, dest=None):
        self.source=source
        self.dest=dest
        self.package = Package (uri=source)
        self.muxrate = None

    def convert(self):
        count=0
        for a in self.package.annotations:
            bc = a.fragment
            if isinstance(bc, ByteCountFragment):
                a.fragment = self.fragment_bc2ms (bc)
                count += 1
        return count
    
    def save(self):
        self.package.save(as=self.dest)

    def set_muxrate (self, mux):
        self.muxrate = long(mux)
        
    def get_muxrate (self):
        if self.muxrate is None:
            try:
                self.muxrate = long(self.package.getMetaData(config.data.namespace, 'mux-rate'))
            except TypeError:
                print "The mux-rate of the movie is not present in the package metadata."
                print "You should run the get_muxrate script to get its value"
                print "and feed it to the conversion script as third parameter."
                sys.exit(1)
                
        return self.muxrate
    
    def bc2ms (self, val):
        return long(1000 * val / self.get_muxrate())


    def fragment_bc2ms (self, old):
        new = MillisecondFragment (begin=self.bc2ms(old.begin),
                                   end=self.bc2ms(old.end))
        return new

def usage ():
    print """Syntaxe: bc2ms old-file new-file [muxrate]"""
    sys.exit(1)
    
if __name__ == "__main__":
    try:
        source = sys.argv[1]
    except IndexError:
        usage()
    try:
        dest = sys.argv[2] 
    except IndexError:
        usage()

    try:
        muxrate = sys.argv[3]
    except IndexError:
        muxrate = None
    
    c = Convert(source, dest)
    if muxrate is not None:
        c.set_muxrate(muxrate)
        
    count = c.convert()
    c.save()
    
    print "Converted %d annotations." % count

